int TYPE 1
list identifier 1
[ oBracket 1
10 num 1
] cBracket 1
; Endline 1
list identifier 2
= equals 2
[ oBracket 2
1 num 2
, COMMA 2
2 num 2
, COMMA 2
3 num 2
, COMMA 2
4 num 2
, COMMA 2
5 num 2
, COMMA 2
6 num 2
, COMMA 2
7 num 2
, COMMA 2
8 num 2
, COMMA 2
9 num 2
, COMMA 2
10 num 2
] cBracket 2
; Endline 2
int TYPE 3
func identifier 3
( oParenthesis 3
int TYPE 3
j identifier 3
, COMMA 3
int TYPE 3
k identifier 3
) cParenthesis 3
{ oBRACE 3
if keywordif 4
( oParenthesis 4
k identifier 4
< binOP 4
j identifier 4
) cParenthesis 4
{ oBRACE 4
while keywordwhile 5
( oParenthesis 5
j identifier 5
> binOP 5
0 num 5
) cParenthesis 5
{ oBRACE 5
list identifier 6
[ oBracket 6
j identifier 6
] cBracket 6
= equals 6
2 num 6
* binOP 6
j identifier 6
+ binOP 6
1 num 6
; Endline 6
j identifier 7
= equals 7
j identifier 7
- binOP 7
1 num 7
; Endline 7
} cBRACE 8
return keywordreturn 9
list identifier 9
[ oBracket 9
k identifier 9
] cBracket 9
; Endline 9
} cBRACE 10
else keywordelse 11
{ oBRACE 11
return keywordreturn 12
0 num 12
; Endline 12
} cBRACE 13
} cBRACE 14
int TYPE 15
main identifier 15
( oParenthesis 15
) cParenthesis 15
{ oBRACE 16
write keywordwrite 17
( oParenthesis 17
func identifier 17
( oParenthesis 17
10 num 17
, COMMA 17
5 num 17
) cParenthesis 17
) cParenthesis 17
; Endline 17
write keywordwrite 18
( oParenthesis 18
func identifier 18
( oParenthesis 18
5 num 18
, COMMA 18
10 num 18
) cParenthesis 18
) cParenthesis 18
; Endline 18
return keywordreturn 19
0 num 19
; Endline 19
} cBRACE 20
