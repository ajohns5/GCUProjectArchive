int TYPE 1
list identifier 1
[ oBracket 1
10 num 1
] cBracket 1
; Endline 1
int TYPE 2
func identifier 2
( oParenthesis 2
int TYPE 2
j identifier 2
, COMMA 2
int TYPE 2
k identifier 2
) cParenthesis 2
{ oBRACE 2
if keywordif 3
( oParenthesis 3
k identifier 3
< binOP 3
j identifier 3
) cParenthesis 3
{ oBRACE 3
while keywordwhile 4
( oParenthesis 4
j identifier 4
> binOP 4
0 num 4
) cParenthesis 4
{ oBRACE 4
list identifier 5
[ oBracket 5
j identifier 5
] cBracket 5
= equals 5
2 num 5
* binOP 5
j identifier 5
+ binOP 5
1 num 5
; Endline 5
j identifier 6
= equals 6
j identifier 6
- binOP 6
1 num 6
; Endline 6
} cBRACE 7
return keywordreturn 8
list identifier 8
[ oBracket 8
k identifier 8
] cBracket 8
; Endline 8
} cBRACE 9
else keywordelse 10
{ oBRACE 10
return keywordreturn 11
0 num 11
; Endline 11
} cBRACE 12
} cBRACE 13
int TYPE 14
main identifier 14
( oParenthesis 14
int TYPE 14
l identifier 14
) cParenthesis 14
{ oBRACE 15
l identifier 16
= equals 16
2 num 16
; Endline 16
} cBRACE 17
